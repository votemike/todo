{"version":3,"sources":["components/Todo.js","components/TodoList.js","components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","_ref","removeTodo","index","text","react_default","a","createElement","Fragment","className","onClick","TodoList","todos","map","todo","components_Todo","Object","assign","key","TodoForm","keyPressHandler","placeholder","type","onKeyDown","autoFocus","App","todoList","_React$useState","React","useState","_React$useState2","slicedToArray","setTodos","length","components_TodoList","newTodos","toConsumableArray","splice","AddTodo","event","keyCode","preventDefault","target","value","trim","concat","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sOAaeA,SAXF,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,WAAYC,EAAfF,EAAeE,MAAOC,EAAtBH,EAAsBG,KAAtB,OACTC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACVL,EACDC,EAAAC,EAAAC,cAAA,UAAQE,UAAU,SAASC,QAAS,kBAAMR,EAAWC,WCItDQ,EARE,SAAAV,GAAA,IAAGW,EAAHX,EAAGW,MAAOV,EAAVD,EAAUC,WAAV,OACbG,EAAAC,EAAAC,cAAA,MAAIE,UAAU,aACTG,EAAMC,IAAI,SAACC,EAAMX,GAAP,OACPE,EAAAC,EAAAC,cAACQ,EAADC,OAAAC,OAAA,CAAMC,IAAKf,EAAOA,MAAOA,GAAWW,EAApC,CAA0CZ,WAAYA,SCQnDiB,MAZf,SAAAlB,GAAuC,IAAnBmB,EAAmBnB,EAAnBmB,gBAChB,OACIf,EAAAC,EAAAC,cAAA,SACIE,UAAU,WACVY,YAAY,yBACZC,KAAK,OACLC,UAAWH,EACXI,WAAW,KCgDRC,MApDf,WAAe,IA+BTC,EA/BSC,EACaC,IAAMC,SAAS,CACvC,CAAEzB,KAAM,sBACR,CAAEA,KAAM,kBACR,CAAEA,KAAM,kBAJG0B,EAAAd,OAAAe,EAAA,EAAAf,CAAAW,EAAA,GACNf,EADMkB,EAAA,GACCE,EADDF,EAAA,GAyCb,OATIlB,EAAMqB,OAAS,IACjBP,EACIrB,EAAAC,EAAAC,cAAA,WAASE,UAAU,QACjBJ,EAAAC,EAAAC,cAAC2B,EAAD,CAAUtB,MAAOA,EAAOV,WAVb,SAAAC,GACjB,IAAMgC,EAAQnB,OAAAoB,EAAA,EAAApB,CAAOJ,GACrBuB,EAASE,OAAOlC,EAAO,GACvB6B,EAASG,QAcP9B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAC+B,EAAD,CAASlB,gBApCY,SAAAmB,GAC3B,GAHgB,KAGZA,EAAMC,QAAV,CAIAD,EAAME,iBAEN,IAAMrC,EAAOmC,EAAMG,OAAOC,MAAMC,OAEhC,GAAIxC,EAAM,CACR,IAAM+B,EAAQ,GAAAU,OAAA7B,OAAAoB,EAAA,EAAApB,CAAOJ,GAAP,CAAc,CAAER,UAC9B4B,EAASG,GACTI,EAAMG,OAAOC,MAAQ,SA0BlBjB,ICxCHoB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,QAAwB9B,OAAOC,SAAS8B,MACpDC,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,OAAQ,WAC9B,IAAM5B,EAAK,GAAAR,OAAMiC,QAAN,sBAEPhC,GAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,GACHK,KAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,KAAK,SAAAC,GACjCA,EAAa+B,aAAahC,KAAK,WAC7BV,OAAOC,SAAS0C,aAKpBvC,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEArFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,KAAK,WACjCQ,QAAQC,IACN,gHAMJf,EAAgBC,EAAOC,MCvC/BE","file":"static/js/main.b1e48042.chunk.js","sourcesContent":["import React from 'react';\n\nconst Todo = ({ removeTodo, index, text }) => (\n    <React.Fragment>\n        <li>\n            <div className='inner'>\n                {text}\n                <button className='remove' onClick={() => removeTodo(index)}></button>\n            </div>\n        </li>\n    </React.Fragment>\n);\n\nexport default Todo\n","import React from 'react';\nimport Todo from './Todo';\n\nconst TodoList = ({ todos, removeTodo }) => (\n    <ul className=\"todo-list\">\n        {todos.map((todo, index) => (\n            <Todo key={index} index={index} {...todo} removeTodo={removeTodo} />\n        ))}\n    </ul>\n);\n\nexport default TodoList\n","import React from 'react';\n\nfunction TodoForm({ keyPressHandler }) {\n    return (\n        <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            type=\"text\"\n            onKeyDown={keyPressHandler}\n            autoFocus={true}\n        />\n    );\n}\n\nexport default TodoForm\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\nimport AddTodo from './components/AddTodo';\n\nfunction App() {\n  const [todos, setTodos] = React.useState([\n    { text: \"Add to Home screen\" },\n    { text: \"Add some todos\" },\n    { text: \"Test offline\" }\n  ]);\n\n  const ENTER_KEY = 13;\n\n  const handleNewTodoKeyDown = event => {\n    if (event.keyCode !== ENTER_KEY) {\n      return;\n    }\n\n    event.preventDefault();\n\n    const text = event.target.value.trim();\n\n    if (text) {\n      const newTodos = [...todos, { text }];\n      setTodos(newTodos);\n      event.target.value = '';\n    }\n  };\n\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  let todoList;\n  if (todos.length > 0) {\n    todoList = (\n        <section className=\"main\">\n          <TodoList todos={todos} removeTodo={removeTodo}/>\n        </section>\n    );\n  }\n\n\n  return (\n      <div className=\"App\">\n        <header>\n          <h1>Tah-Do</h1>\n          <AddTodo keyPressHandler={handleNewTodoKeyDown} />\n        </header>\n        {todoList}\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}