{"version":3,"sources":["components/Todo.js","components/TodoList.js","components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","_ref","removeTodo","index","text","effort","impact","react_default","a","createElement","className","onClick","TodoList","todos","map","todo","components_Todo","Object","assign","key","TodoForm","submitHandler","onSubmit","name","placeholder","type","autoFocus","required","min","max","step","App","todoList","sortButton","_useStateWithLocalSto","storageKey","_React$useState","React","useState","JSON","parse","localStorage","getItem","_React$useState2","slicedToArray","setTodos","useEffect","setItem","stringify","useStateWithLocalStorage","_useStateWithLocalSto2","getPrioritisedTodos","sort","b","length","components_TodoList","newTodos","toConsumableArray","splice","todosString","prioritisedTodos","todosNeedSorting","AddTodo","event","preventDefault","target","elements","value","trim","concat","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f80dc967.chunk.js","sourcesContent":["import React from 'react';\n\nconst Todo = ({ removeTodo, index, text, effort, impact }) => (\n    <li>\n        <div className='todo-text'>\n            {text}\n        </div>\n        <div className=\"todo-meta\">\n            <div className=\"metaline\">\n                <div className=\"metalinelabel\">\n                    Effort:\n                </div>\n                <div className=\"metalinenumber\">\n                    {effort}\n                </div>\n            </div>\n            <div className=\"metaline\">\n                <div className=\"metalinelabel\">\n                    Impact:\n                </div>\n                <div className=\"metalinenumber\">\n                    {impact}\n                </div>\n            </div>\n        </div>\n        <button className='remove' onClick={() => removeTodo(index)}></button>\n    </li>\n);\n\nexport default Todo\n","import React from 'react';\nimport Todo from './Todo';\n\nconst TodoList = ({ todos, removeTodo }) => (\n    <ul>\n        {todos.map((todo, index) => (\n            <Todo key={index} index={index} {...todo} removeTodo={removeTodo} />\n        ))}\n    </ul>\n);\n\nexport default TodoList\n","import React from 'react';\n\nfunction TodoForm({ submitHandler }) {\n    return (\n        <form onSubmit={submitHandler}>\n            <div className=\"text-input-wrapper\">\n                <input\n                    name=\"todo\"\n                    placeholder=\"What needs to be done?\"\n                    type=\"text\"\n                    autoFocus={true}\n                    required={true}\n                />\n            </div>\n            <div className=\"ei-wrapper\">\n                <input type=\"number\" min=\"1\" max=\"10\" step=\"1\" placeholder=\"Effort\" className=\"effort\" name=\"effort\" required={true}/>\n                <input type=\"number\" min=\"0\" max=\"10\" step=\"1\" placeholder=\"Impact\" className=\"impact\" name=\"impact\" required={true}/>\n            </div>\n            <button type=\"submit\">Add</button>\n        </form>\n    );\n}\n\nexport default TodoForm\n","import React from 'react';\nimport './App.scss';\nimport TodoList from './components/TodoList';\nimport AddTodo from './components/AddTodo';\n\nfunction App() {\n  const useStateWithLocalStorage = storageKey => {\n    const [todos, setTodos] = React.useState(\n        JSON.parse(localStorage.getItem(storageKey)) || [\n      { effort: 1, impact: 10, text: \"Add to Home screen\" },\n      { effort: 2, impact: 9, text: \"Add some todos\" },\n      { effort: 3, impact: 4, text: \"Test offline\" }\n    ]);\n\n    React.useEffect(() => {\n      localStorage.setItem(storageKey, JSON.stringify(todos));\n    }, [todos, storageKey]);\n\n    return [todos, setTodos];\n  };\n\n  const [todos, setTodos] = useStateWithLocalStorage('todos');\n\n  const addTodoHandler = event => {\n    event.preventDefault();\n\n    const text = event.target.elements.todo.value.trim();\n\n    if (text) {\n      const newTodos = [...todos, { text: event.target.elements.todo.value, effort: event.target.elements.effort.value || 5, impact: event.target.elements.impact.value || 5 }];\n      setTodos(newTodos);\n      event.target.elements.todo.value = null;\n      event.target.elements.effort.value = null;\n      event.target.elements.impact.value = null;\n    }\n  };\n\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  const todosNeedSorting = function (todos) {\n    if (todos.length <= 1) {\n      return false;\n    }\n\n    const todosString = JSON.stringify(todos); //clone\n    const prioritisedTodos = getPrioritisedTodos(JSON.parse(todosString));\n\n    return JSON.stringify(prioritisedTodos) !== todosString;\n  };\n\n  const prioritiseTodos = () => {\n    setTodos(getPrioritisedTodos(JSON.parse(JSON.stringify(todos))));\n  };\n\n  const getPrioritisedTodos = todos => {\n    todos.sort((a, b) => (b.impact - b.effort) - (a.impact - a.effort));\n    return todos;\n  };\n\n  let todoList;\n  let sortButton;\n  if (todos.length > 0) {\n    todoList = (\n        <section className=\"list\">\n          <TodoList todos={todos} removeTodo={removeTodo}/>\n        </section>\n    );\n    sortButton = (\n        <div className={\"prioritise-button-wrapper \" + (todosNeedSorting(todos) ? \"\" : \"hidden\")}>\n          <button className=\"prioritise-button\" onClick={prioritiseTodos}>Prioritise</button>\n        </div>\n    );\n  }\n\n\n  return (\n      <div>\n        <header>\n          <h1>Tah-Do</h1>\n        </header>\n        <div className=\"notepad\">\n          <AddTodo submitHandler={addTodoHandler} />\n          {sortButton}\n          {todoList}\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}